import com.dropbox.core.DbxAppInfo;
import com.dropbox.core.DbxAuthFinish;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.DbxWebAuthNoRedirect;
import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.files.FileMetadata;
import com.dropbox.core.v2.files.ListFolderResult;
import com.dropbox.core.v2.files.Metadata;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

public class Dropbox {
    private static final String APP_KEY = "ulc3ur1w0e1v58g"; // Replace with your app key
    private static final String APP_SECRET = "63nrywvxyfkpb6u"; // Replace with your app secret
    private DbxClientV2 client;

    public Dropbox() throws IOException {
        authenticate();
    }

    private void authenticate() throws IOException {
        DbxAppInfo appInfo = new DbxAppInfo(APP_KEY, APP_SECRET);
        DbxRequestConfig config = DbxRequestConfig.newBuilder("dropbox/java-tutorial").build();
        DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(config, appInfo);

        String authorizeUrl = webAuth.start();
        System.out.println(authorizeUrl);
        System.out.println("2. Click 'Allow' and copy the authorization code.");

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String authCode = reader.readLine().trim();

        try {
            DbxAuthFinish authFinish = webAuth.finish(authCode);
            String accessToken = authFinish.getAccessToken();
            client = new DbxClientV2(config, accessToken);
            System.out.println("Successfully authenticated!");
        } catch (DbxException e) {
            e.printStackTrace();
        }
    }

    public void uploadFile(String localFilePath, String dropboxPath) {
        try (FileInputStream inputStream = new FileInputStream(localFilePath)) {
            FileMetadata metadata = client.files().uploadBuilder(dropboxPath)
                    .uploadAndFinish(inputStream);
            System.out.println("Uploaded: " + metadata.getName());
        } catch (DbxException | IOException e) {
            e.printStackTrace();
        }
    }

    public int listFiles(String usuario, String folderPath) {
        try {
            // List files in the specified folder
            ListFolderResult result = client.files().listFolder(folderPath);

            // Print the files and folders in the current directory
            for (Metadata metadata : result.getEntries()) {
                System.out.println(metadata.getPathLower());
            }

            // Check if there are more files to list
            while (result.getHasMore()) {
                result = client.files().listFolderContinue(result.getCursor());
                int i = 1;
                for (Metadata metadata : result.getEntries()) {
                    System.out.println(metadata.getPathLower());
                    if (!metadata.getPathLower().contains(usuario + i)) {
                        return i;
                    } else {
                        i++;
                    }
                }
            }
        } catch (DbxException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public DbxClientV2 getClient() {
        return client;
    }

    public static void main(String[] args) {
        try {
            Dropbox dropbox = new Dropbox();
            dropbox.listFiles("usuario", "users"); // List files after authentication
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}