import com.dropbox.core.DbxAppInfo;
import com.dropbox.core.DbxAuthFinish;
import com.dropbox.core.DbxException;
import com.dropbox.core.DbxRequestConfig;
import com.dropbox.core.DbxWebAuth;
import com.dropbox.core.DbxWebAuthNoRedirect;
import com.dropbox.core.v2.DbxClientV2;
import com.dropbox.core.v2.files.FileMetadata;
import com.dropbox.core.v2.files.ListFolderResult;
import com.dropbox.core.v2.files.Metadata;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Dropbox {
	private static final String APP_KEY = "YOUR_APP_KEY"; // Replace with your app key
    private static final String APP_SECRET = "YOUR_APP_SECRET"; // Replace with your app secret
    private static final String REDIRECT_URI = "YOUR_REDIRECT_URI"; // Replace with your redirect URI

    private DbxClientV2 client;
    private String refreshToken;

    public Dropbox() throws IOException {
        authenticate();
    }

    private void authenticate() throws IOException {
        DbxAppInfo appInfo = new DbxAppInfo(APP_KEY, APP_SECRET);
        DbxRequestConfig config = DbxRequestConfig.newBuilder("dropbox/java-tutorial").build();
        DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(config, appInfo);

        // Check if we have stored tokens
        String storedAccessToken = ""; // Load from secure storage
        refreshToken = ""; // Load from secure storage

        if (storedAccessToken != null && !storedAccessToken.isEmpty()) {
            client = new DbxClientV2(config, storedAccessToken);
            System.out.println("Successfully authenticated with stored access token!");
        } else {
            String authorizeUrl = webAuth.start();
            System.out.println("1. Go to: " + authorizeUrl);
            System.out.println("2. Click 'Allow' and copy the authorization code.");

            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String authCode = reader.readLine().trim();

            try {
                DbxAuthFinish authFinish = webAuth.finish(authCode);
                String accessToken = authFinish.getAccessToken();
                refreshToken = authFinish.getRefreshToken();

                client = new DbxClientV2(config, accessToken);
                System.out.println("Successfully authenticated!");
                
                // Store accessToken and refreshToken securely
            } catch (DbxException e) {
                e.printStackTrace();
            }
        }
    }


    public void uploadFile(String localFilePath, String dropboxPath) {
        try (FileInputStream inputStream = new FileInputStream(localFilePath)) {
            FileMetadata metadata = client.files().uploadBuilder(dropboxPath)
                    .uploadAndFinish(inputStream);
            System.out.println("Uploaded: " + metadata.getName());
        } catch (DbxException | IOException e) {
            e.printStackTrace();
        }
    }

    public int listFiles(String usuario, String folderPath) {
        List<Metadata> allEntries = new ArrayList<>();
        int i = 1;
        
        try {
            // List files in the specified folder
            ListFolderResult result = client.files().listFolder(folderPath);

            // Collect all entries
            allEntries.addAll(result.getEntries());

            // Check if there are more files to list
            while (result.getHasMore()) {
                result = client.files().listFolderContinue(result.getCursor());
                allEntries.addAll(result.getEntries());
            }

            // Sort entries based on user criteria
            Collections.sort(allEntries, new Comparator<Metadata>() {
                @Override
                public int compare(Metadata m1, Metadata m2) {
                    boolean m1ContainsUser  = m1.getPathLower().contains(usuario);
                    boolean m2ContainsUser  = m2.getPathLower().contains(usuario);
                    
                    // Prioritize entries that contain the usuario
                    if (m1ContainsUser  && !m2ContainsUser ) {
                        return -1; // m1 comes before m2
                    } else if (!m1ContainsUser  && m2ContainsUser ) {
                        return 1; // m2 comes before m1
                    } else {
                        // If both or neither contain usuario, sort alphabetically
                        return m1.getPathLower().compareTo(m2.getPathLower());
                    }
                }
            });

            // Print the sorted files and folders
            for (Metadata metadata : allEntries) {
                System.out.println(metadata.getPathLower());
                if (!metadata.getPathLower().contains(usuario + i)) {
                    return i;
                } else {
                    i++;
                }
            }
        } catch (DbxException e) {
            e.printStackTrace();
        }
        return i;
    }

    public DbxClientV2 getClient() {
        return client;
    }

    
}